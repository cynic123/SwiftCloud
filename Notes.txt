Basic Search
------------
Request:
GET http://localhost:3000/api/search?q=Love Story&limit=10&offset=0

Response:






AdvancedSearch
--------------
Request:
POST http://localhost:3000/api/search/advanced
{
  "query": "Love Story",
  "filters": [
    { "field": "year", "operator": "gte", "value": 2008 },
    { "field": "album", "operator": "eq", "value": "Fearless" }
  ],
  "sort": { "field": "year", "order": "desc" },
  "limit": 20,
  "offset": 0
}

Response:
{
    "results": [
        {
            "id": "66a392230d30653f90571d20",
            "type": "song",
            "title": "Love Story",
            "artist": "Taylor Swift",
            "relevance_score": 1.5
        },
        {
            "id": "66a392230d30653f90571d61",
            "type": "song",
            "title": "The Way I Loved You",
            "artist": "Taylor Swift",
            "relevance_score": 0.75
        }
    ],
    "total_results": 2
}

The relevance score is a numerical value that indicates how closely a document (in our case, a song) matches the search query. It's typically used to rank search results, with higher scores indicating better matches.
In MongoDB, when using text search, the relevance score is calculated based on factors like:
1. How many times the search terms appear in the document.
2. The importance of the fields where the terms appear.
3. The rarity of the search terms across all documents.

Factors Affecting the Score:
1. Field weights: If you've set up your text index to give more weight to certain fields (e.g., title more important than lyrics), this will affect the scores.
2. Term frequency: How often the search terms appear in each document.
3. Document length: Longer documents might have lower scores for the same term frequency.
4. Exact matches vs partial matches: Exact phrase matches typically score higher.

swift-api: gRPC error: Error: 2 UNKNOWN: Aggregate has empty pipeline
swift-api:     at callErrorFromStatus (/Users/prithwish.samanta/workspace/SwiftCloud/swift-api/node_modules/@grpc/grpc-js/build/src/call.js:31:19)
swift-api:     at Object.onReceiveStatus (/Users/prithwish.samanta/workspace/SwiftCloud/swift-api/node_modules/@grpc/grpc-js/build/src/client.js:193:76)
swift-api:     at Object.onReceiveStatus (/Users/prithwish.samanta/workspace/SwiftCloud/swift-api/node_modules/@grpc/grpc-js/build/src/client-interceptors.js:360:141)
swift-api:     at Object.onReceiveStatus (/Users/prithwish.samanta/workspace/SwiftCloud/swift-api/node_modules/@grpc/grpc-js/build/src/client-interceptors.js:323:181)
swift-api:     at /Users/prithwish.samanta/workspace/SwiftCloud/swift-api/node_modules/@grpc/grpc-js/build/src/resolving-call.js:129:78
swift-api:     at process.processTicksAndRejections (node:internal/process/task_queues:77:11)
swift-api: for call at
swift-api:     at ServiceClientImpl.makeUnaryRequest (/Users/prithwish.samanta/workspace/SwiftCloud/swift-api/node_modules/@grpc/grpc-js/build/src/client.js:161:32)
swift-api:     at ServiceClientImpl.<anonymous> (/Users/prithwish.samanta/workspace/SwiftCloud/swift-api/node_modules/@grpc/grpc-js/build/src/make-client.js:105:19)
swift-api:     at /Users/prithwish.samanta/workspace/SwiftCloud/swift-api/src/routes/popularityRoutes.js:38:12
swift-api:     at Layer.handle [as handle_request] (/Users/prithwish.samanta/workspace/SwiftCloud/swift-api/node_modules/express/lib/router/layer.js:95:5)
swift-api:     at next (/Users/prithwish.samanta/workspace/SwiftCloud/swift-api/node_modules/express/lib/router/route.js:149:13)
swift-api:     at Route.dispatch (/Users/prithwish.samanta/workspace/SwiftCloud/swift-api/node_modules/express/lib/router/route.js:119:3)
swift-api:     at Layer.handle [as handle_request] (/Users/prithwish.samanta/workspace/SwiftCloud/swift-api/node_modules/express/lib/router/layer.js:95:5)
swift-api:     at /Users/prithwish.samanta/workspace/SwiftCloud/swift-api/node_modules/express/lib/router/index.js:284:15
swift-api:     at Function.process_params (/Users/prithwish.samanta/workspace/SwiftCloud/swift-api/node_modules/express/lib/router/index.js:346:12)
swift-api:     at next (/Users/prithwish.samanta/workspace/SwiftCloud/swift-api/node_modules/express/lib/router/index.js:280:10) {
swift-api:   code: 2,
swift-api:   details: 'Aggregate has empty pipeline',
swift-api:   metadata: Metadata {
swift-api:     internalRepr: Map(2) { 'content-type' => [Array], 'date' => [Array] },
swift-api:     options: {}
swift-api:   }
swift-api: }

//TODO: Search service advamced search requires input validation and fix for all time query.